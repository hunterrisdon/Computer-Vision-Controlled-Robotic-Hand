#include <ESP32Servo.h>

// ?? PIN ASSIGNMENT ????????????????????????????????????????????
constexpr uint8_t SERVO_PINS[5] = { 32, 33, 14, 23, 22 };

// ?? ?fully closed? angles (measure these once, by hand) ????????
constexpr uint8_t CLOSED_DEG[5] = { 175, 175, 175, 175, 175 };

// ?? how far open is from closed ???????????????????????????????
constexpr uint8_t OPEN_SPREAD = 170;

// ?? logical states ?????????????????????????????????????????????
enum FingerState : uint8_t { OPEN = 0, MID = 1, CLOSED = 2 };
 
// ?? globals ????????????????????????????????????????????????????
Servo   servos[5];
uint8_t angleOpen[5];
uint8_t angleMid [5];

// ?? map state ? angle ??????????????????????????????????????????
inline uint8_t stateToAngle(uint8_t finger, FingerState st) {
  switch (st) {
    case OPEN:  return angleOpen[finger];
    case MID:   return angleMid [finger];
    default:    return CLOSED_DEG[finger];
  }
}

void setup() {
  Serial.begin(115200);

  // pre?compute OPEN & MID angles
  for (uint8_t i = 0; i < 5; ++i) {
    angleOpen[i] = (CLOSED_DEG[i] > OPEN_SPREAD)
                   ? CLOSED_DEG[i] - OPEN_SPREAD
                   : 0;
    angleMid [i] = (CLOSED_DEG[i] + angleOpen[i]) / 2;
  }

  // attach each servo and move to OPEN
  for (uint8_t i = 0; i < 5; ++i) {
    servos[i].setPeriodHertz(50);
    servos[i].attach(SERVO_PINS[i], 500, 2500);
    servos[i].write(angleOpen[i]);
  }

  Serial.println(F("READY ? send 5 comma?separated states (0=open,1=mid,2=closed) + newline"));
}

void loop() {
  static String inLine;
  while (Serial.available()) {
    char c = Serial.read();
    if (c == '\n') {
      int s[5];
      if (sscanf(inLine.c_str(), "%d,%d,%d,%d,%d",
                 &s[0], &s[1], &s[2], &s[3], &s[4]) == 5) {
        for (uint8_t i = 0; i < 5; ++i)
          servos[i].write(stateToAngle(i, (FingerState)s[i]));
      } else {
        Serial.println(F("ERR: need exactly 5 integers 0-2"));
      }
      inLine = "";
    } else {
      inLine += c;
    }
  }
}